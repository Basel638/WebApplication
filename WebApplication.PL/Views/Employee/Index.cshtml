@model IEnumerable<Employee>


@{
	ViewData["Title"] = "Employee";

	string ViewDataMessage = ViewData["Message"] as string; // Enforce Type Safety -> Requires Type Conversion => Strongly Type Language

	string ViewBagMessage = ViewBag.Message; //Compiler Can't Enforce Type Safety -> Not Require Type Conversion [Weekly Type]
}

@* 
<div class="alert-warning">
	@ViewData["Message"]

	
</div>

<div class="alert-warning">
	@ViewBag.Message
</div> *@


@if(!string.IsNullOrEmpty( TempData["Message"] as string))
{
	<div class="alert alert-primary">
	@TempData["Message"]
</div>
}


<h1>All Employees</h1>
<br /> @* endl *@
<br />


<a asp-controller="Employee" asp-action="Create" class="btn btn-primary">Create New Employees</a>
<br />

@if (Model.Count() > 0)
{
	<table class="mt-4 table table-striped table-hover">
		<thead>
			<tr>
				<th>@Html.DisplayNameFor(D => D.Name)</th>
				<th>@Html.DisplayNameFor(D => D.Email)</th>
				<th>@Html.DisplayNameFor(D => D.Salary)</th>
				<th>@Html.DisplayNameFor(D => D.IsActive)</th>
				@* <th>@Html.DisplayNameFor(D => D.PhoneNumber)</th> *@
				@* <th>@Html.DisplayNameFor(D => D.EmployeeType)</th> *@
				<th>@Html.DisplayNameFor(D => D.Gender)</th>
				@* <th>@Html.DisplayNameFor(D => D.HiringDate)</th> *@
				<th>@Html.DisplayNameFor(D => D.Age)</th>
				<th>Details</th>
				<th>Update</th>
				<th>Delete</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var employee in Model)
			{
				<tr>
					<td>@employee.Name</td>
					<td>@employee.Age</td>
					<td>@Html.DisplayFor(M=> employee.Salary)</td>
					<td>@Html.DisplayFor(M=>employee.IsActive)</td>
					<td>@employee.Gender</td>
					<td>@Html.DisplayFor(M=>employee.Email)</td>
					<partial name="_ButtonsPartial" model="@employee.Id"/>
				</tr>

			}
		</tbody>
	</table>
}
else
{
	<div class="mt-4 alert alert-warning">


		<h3>There is No Employees :(</h3>
	</div>
}